@model OBMPDataModel.Product


<link href="~/Content/toastr.css" rel="stylesheet" />
<script src="~/Scripts/toastr.js"></script>

@{
    ViewBag.Title = "Manage Patner Product";
}

<ul id="myTab" class="nav nav-tabs">
    <li><a href="~/Product/Manage" class="btn-large">Product List</a></li>
    <li  class="active"><a href="~/Product/Add"  class="btn-large">Edit Product</a></li>
    <li><a href="~/Product/Category" class="btn-large">Category</a></li>
    <li><a href="~/Product/MarketPlaceSection"  class="btn-large">Market Place Section</a></li>
</ul>


<script>

    toastr.options = {
        "closeButton": false,
        "debug": false,
        "positionClass": "toast-top-full-width",
        "onclick": null,
        "showDuration": "300",
        "hideDuration": "1000",
        "timeOut": "5000",
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    }

    $(function () {
        $('#RevenuShareTypeRadio1').click(function () {
            //alert($(this).attr('value'));
            $('#FixedRevenue').removeClass('hidden');
            $('#PercentageRevenue').addClass('hidden');
        });

        $('#RevenuShareTypeRadio2').click(function () {
            //alert($(this).attr('value'));
            $('#FixedRevenue').addClass('hidden');
            $('#PercentageRevenue').removeClass('hidden');
        });

        $('#radioChargeType1').click(function () {
            $('#TierData').addClass('hidden');
        });
        $('#radioChargeType2').click(function () {
            $('#TierData').addClass('hidden');
        });
        $('#radioChargeType3').click(function () {
            $('#TierData').removeClass('hidden');
        });

        wnd = $("#modalWindow").kendoWindow({
            title: "Delete confirmation",
            modal: true,
            visible: false,
            resizable: false,
            width: 300
        }).data("kendoWindow");

    });

    function openWindow(e) {

        e.preventDefault();

        $("#modalWindow").parent().find(".k-window-action").css("visibility", "hidden");

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        wnd.center().open();

        $("#no").click(function () {
            row = null;
            wnd.close();
        });

        $("#yes").click(function () {
            
            grid.removeRow(row);
            row = null;
            wnd.close();
        });
    }

    function AddTierDataToForm() {

        var gview = $('#ProductTieredUsage').data('kendoGrid');
        var items = gview.dataSource.data();

        for (i = 0; i < items.length; i++) {

            var item = items[i];
            var inputElement1 = "<input type='hidden' name='ProductTieredUsage[" + i.toString() + "].Lower'" + "value='" + item.Lower + "' />";
            var inputElement2 = "<input type='hidden' name='ProductTieredUsage[" + i.toString() + "].Upper'" + "value='" + item.Upper + "' />";
            var inputElement3 = "<input type='hidden' name='ProductTieredUsage[" + i.toString() + "].Charge'" + "value='" + item.Charge + "' />";

            $('#AddProductForm').append(inputElement1).append(inputElement2).append(inputElement3);

        }

        //sending data count for server processing
        var inputDataRowCount = "<input type='hidden' name='ProductTieredUsageCount'" + "value='" + items.length + "' />";
        $('#AddProductForm').append(inputDataRowCount);
    }

</script>

@if (TempData["Success"] != null && TempData["Success"].ToString() == "true")
{
                    
                        <script>

                            (function () {
                                toastr.success('Product data updated successfully :)');

                            })();
                        </script>
}

@if (TempData["Success"] != null && TempData["Success"].ToString() == "false")
{
                    
                        <script>
                            (function () {
                                toastr.error('Some erroe occured :(');
                            })();
                        </script>
}



<section>

    @using (Html.BeginForm("Add", "Product", FormMethod.Post, new { @class = "form-horizontal", @id="AddProductForm" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)


        <div class="well well-small">        
        
            <h4>Product Info</h4> <hr />

        <div class="row">

            <div class="span4">
                <div class="control-group">
                    @Html.LabelFor(model => model.Name, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.Name)
                        @Html.ValidationMessageFor(model => model.Name)
                    </div>
                </div>



                <div class="control-group">
                    @Html.LabelFor(model => model.PartnerProductName, new { @class = "control-label" })

                    <div class="controls">
                        @Html.EditorFor(model => model.PartnerProductName)
                        @Html.ValidationMessageFor(model => model.PartnerProductName)
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(model => model.SSOTProductName, new { @class = "control-label" })

                    <div class="controls">
                        @Html.EditorFor(model => model.SSOTProductName)
                        @Html.ValidationMessageFor(model => model.SSOTProductName)
                    </div>
                </div>



            </div>

            <div class="span4">

                <div class="control-group">
                    @Html.LabelFor(model => model.SAPProductName, new { @class = "control-label" })

                    <div class="controls">
                        @Html.EditorFor(model => model.SAPProductName)
                        @Html.ValidationMessageFor(model => model.SAPProductName)
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(model => model.GSMISProductName, new { @class = "control-label" })

                    <div class="controls">
                        @Html.EditorFor(model => model.GSMISProductName)
                        @Html.ValidationMessageFor(model => model.GSMISProductName)
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(model => model.Description, new { @class = "control-label" })

                    <div class="controls">
                        @Html.TextAreaFor(modle => Model.Description)
                        @Html.ValidationMessageFor(model => model.Description)
                    </div>
                </div>

            </div>

        </div> 


        <div class="row">

            <div class="span4">

                <div class="control-group">
                    @Html.LabelFor(model => model.EffectiveDate, new { @class = "control-label" })

                    <div class="controls">
                        @Html.Kendo().DatePickerFor(model=>model.EffectiveDate).Format("yyyy-MM-dd")
                        @Html.ValidationMessageFor(model => model.EffectiveDate)
                    </div>
                </div>

            </div>
            
            <div class="span4">

                <div class="control-group">
                    @Html.LabelFor(model => model.EndDate, new { @class = "control-label" })

                    <div class="controls">
                        @Html.Kendo().DatePickerFor(model=>model.EndDate).Format("yyyy-MM-dd")
                        @Html.ValidationMessageFor(model => model.EndDate)
                    </div>
                </div>


            </div>

        </div>       

        <div class="row">
            <div class="span4">

                <div class="control-group">

                    @Html.LabelFor(model => model.SubCategoryID, "Category", new { @class = "control-label" })
                    <div class="controls">
                            @(Html.Kendo().DropDownListFor(model => model.SubCategoryID)
                                    .BindTo((System.Collections.IEnumerable)ViewData["category"])
                                    .DataValueField("ID")
                                    .DataTextField("Name")
                            )
                          @Html.ValidationMessageFor(model => model.SubCategoryID)
                    </div>

                </div>
           </div>


            <div class="span4">

                <div class="control-group">
                    @Html.LabelFor(model => model.MarketPlaceSectionID, "Marketplace Section", new { @class = "control-label" })

                    <div class="controls">
                            @(Html.Kendo().DropDownListFor(model => model.MarketPlaceSectionID)
                                    .BindTo((System.Collections.IEnumerable)ViewData["section"])
                                    .DataValueField("ID")
                                    .DataTextField("Name")
                            )

                        @Html.ValidationMessageFor(model => model.MarketPlaceSectionID)
                    </div>
                </div>
           </div>
        </div>       

        <div class="row">
            <div class="span4">

                <div class="control-group">

                    @Html.LabelFor(model => model.PartnerID,"Select Partner", new { @class = "control-label" })
                    <div class="controls">
                            @(Html.Kendo().DropDownListFor(model => model.PartnerID)
                                    .BindTo((System.Collections.IEnumerable)ViewData["partner"])
                                    .DataValueField("ID")
                                    .DataTextField("Name")
                            )
                          @Html.ValidationMessageFor(model => model.PartnerID)
                    </div>

                </div>
           </div>


            <div class="span4">

                <div class="control-group">
                    @Html.LabelFor(model => model.ProductStatus,"Product Status", new { @class = "control-label" })

                    <div class="controls">
                        @(Html.Kendo().DropDownListFor(model => model.ProductStatus)
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .BindTo(new List<SelectListItem>() {
                                  new SelectListItem() {
                                      Text = "Active",
                                      Value = "Active"
                                  },
                                  new SelectListItem() {
                                      Text = "Inactive",
                                      Value = "Inactive"
                                  },
                                  new SelectListItem() {
                                      Text = "Pending Approval",
                                      Value = "PendingApproval"
                                  }                                  
                              })
                        )

                        @Html.ValidationMessageFor(model => model.ProductStatus)
                    </div>
                </div>

            </div>

        </div>

</div>

        
        
<div class="well well-small">

        <h4>Pricing</h4> <hr />

        <div class="row">
            <div class="span8">

                <div class="control-group">

                    <label class="control-label">Frequency</label>

                    <div class="controls">

                        <label class="radio inline">
                            @Html.RadioButtonFor(model=> model.ChargeFrequency, "OneOff")  One off
                        </label>
                        <label class="radio inline">
                             @Html.RadioButtonFor(model=> model.ChargeFrequency, "Recurring")
                            Recurring ongoing
                        </label>
                        <div class="input-prepend input-append">
                        <label class="radio inline">
                            @Html.RadioButtonFor(model=> model.ChargeFrequency, "RecurringFixed")
                             Recurring Fixed 
                            
                            @Html.TextBoxFor(model => Model.RecurringFixedMonth, new {@class="input-mini", @value="24" })
                            <span class="add-on">months</span>
                        </label>
                                </div>

                    </div>
                </div>

            </div>
        </div>

        <div class="row">
            <div class="span8">

                <div class="control-group">

                    <label class="control-label">Charge Type</label>

                    <div class="controls">

                        <label class="radio inline">
                          @Html.RadioButtonFor(model=> model.ChargeType, "Fixed")
                            Fixed
                        </label>
                        <label class="radio inline">
                             @Html.RadioButtonFor(model=> model.ChargeType, "Usage")
                            Usage
                        </label>
                        <label class="radio inline">
                             @Html.RadioButtonFor(model=> model.ChargeType, "Tiered")
                            Tiered usage
                        </label>

                    </div>
                </div>

            </div>
        </div>

        <div class="row">
                
            <div class="span4">
                <div class="control-group">
                    
                    <label class="control-label">Charge</label>
                    <div class="controls">

                        <div class="input-prepend input-append">
                          <span class="add-on">$</span>
                           @Html.TextBoxFor(model =>model.Charge, new {@class="input-mini"}) 
                          <span class="add-on">.00</span>
                        </div>
                        @Html.ValidationMessageFor(model => model.Charge)
                    </div>
                </div>

            </div>

            <div class="span4">
                <div class="control-group">
                    <label class="control-label">Apply GST</label>

                    <div class="controls">
                        @Html.CheckBoxFor(model=>model.ApplyGST.Value )
                        @Html.ValidationMessageFor(model => model.ApplyGST)
                        <div class="hidden">
                            @Html.Kendo().DatePicker().Name("DateRegistered").Value(DateTime.Today).Format("yyyy-MM-dd")
                        </div>
                    </div>
                </div>

            </div>
      </div>
</div>                        
        
<div class="well well-small hidden" id="TierData">

    <div class="row">

        <div class="span8">

            @(Html.Kendo().Grid<OBMPDataModel.ProductTieredUsage >()    
    .Name("ProductTieredUsage")
    .Columns(columns => {
        columns.Bound(c => c.ID).Visible(false);
        columns.Bound(c => c.Lower).Title("Lower Range").EditorTemplateName("TextBoxSmall");
        columns.Bound(c => c.Upper).Title("Upper Range").EditorTemplateName("TextBoxSmall"); ;
        columns.Bound(c => c.Charge).Title("Charge(AUD)").EditorTemplateName("TextBoxSmall"); ;
        columns.Command(c => c.Custom("Delete").Click("openWindow"));
    })
    .ToolBar(toolbar => toolbar.Create().Text("Add new tier"))
    .Editable(editable => { editable.Mode(GridEditMode.InCell).CreateAt(GridInsertRowPosition.Bottom); editable.DisplayDeleteConfirmation(false); })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Model(model => 
            {
                model.Id(c => c.ID);
                model.Field(c => c.ID).Editable(false);
            })
            .ServerOperation(false)
    )    
)


        </div>

    </div>



</div>        
        
<div class="well well-small">

        <h4>Revenue Share</h4> <hr />
        
    <div class="row">

            <div class="span8">

                <div class="control-group">

                    <label class="control-label">Share Type</label>

                    <div class="controls">
                        <label class="radio inline">
                            @Html.RadioButtonFor(model=> model.RevenuShareType, "Fixed")
                             Fixed
                        </label>
                        <label class="radio inline">
                            @Html.RadioButtonFor(model=> model.RevenuShareType, "Percentage")
                            Percentage
                        </label>
                    </div>
                </div>

            </div>
    </div>

    <div class="row" id="FixedRevenue">

        <div class="span4">

                <div class="control-group">
                    
                    <label class="control-label">Partner Share</label>
                    <div class="controls">

                        <div class="input-prepend input-append">
                          <span class="add-on">$</span>
                          @*<input class="input-mini" id="FixedPartnerRevenue" name="FixedPartnerRevenue" type="text" value="0">*@
                             @Html.TextBoxFor(model =>model.FixedPartnerRevenue, new {@class="input-mini"}) 
                          <span class="add-on">.00</span>
                        </div>
                    </div>
                </div>

        </div>

        <div class="span4">

                <div class="control-group">
                    
                    <label class="control-label">Optus Share</label>
                    <div class="controls">

                        <div class="input-prepend input-append">
                          <span class="add-on">$</span>
                          @*<input class="input-mini" id="FixedOperatorRevenue" name="FixedOperatorRevenue" type="text" value="0">*@
                             @Html.TextBoxFor(model =>model.FixedOperatorRevenue, new {@class="input-mini"}) 
                          <span class="add-on">.00</span>
                        </div>
                    </div>
                </div>

        </div>

    </div>

    <div class="row hidden" id="PercentageRevenue">

        <div class="span4">

                <div class="control-group">
                    
                    <label class="control-label">Partner Share</label>
                    <div class="controls">

                        <div class="input-prepend input-append">
                          @*<input class="input-mini" id="PercentagePartnerRevenue" name="PercentagePartnerRevenue" type="text" value="0">*@
                             @Html.TextBoxFor(model =>model.PercentagePartnerRevenue, new {@class="input-mini"}) 
                          <span class="add-on">%</span>
                        </div>
                    </div>
                </div>

        </div>

        <div class="span4">

                <div class="control-group">
                    
                    <label class="control-label">Optus Share</label>
                    <div class="controls">

                        <div class="input-prepend input-append">
                          @*<input class="input-mini" id="PercentageOperatorRevenue" name="PercentageOperatorRevenue" type="text" value="0">*@
                              @Html.TextBoxFor(model =>model.PercentageOperatorRevenue, new {@class="input-mini"}) 
                          <span class="add-on">%</span>
                        </div>
                    </div>
                </div>

        </div>

    </div>

    <div class="row">

            <div class="span4">

                <div class="control-group">
                  
                    <div class="controls hidden">
                        @Html.Kendo().DatePicker().Name("DateRegistered").Value(DateTime.Today).Format("yyyy-MM-dd")
                  
                    </div>
                </div>
            </div>

        </div>
</div>            
        
        <p class="pull-right">
            <input type="submit" value="Save Product Data" class="btn btn-primary" onclick="AddTierDataToForm()"/>
            <input type="reset" value="Reset Data" class="btn"  />
        </p>
    
    }


</section>

<div id="modalWindow">
    <strong>Are you sure to delete?</strong>
    <hr />
    <button id="yes" class="btn btn-primary">Yes</button>
    <button id="no" class="btn">No</button>
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
