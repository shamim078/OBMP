@{
    ViewBag.Title = "Manage Partner Products";
}

<link href="~/Content/toastr.css" rel="stylesheet" />
<script src="~/Scripts/toastr.js"></script>

<ul id="myTab" class="nav nav-tabs">
    <li  class="active"><a href="~/Product/Manage" class="btn-large">Product List</a></li>
    <li><a href="~/Product/Add"  class="btn-large">Add New Product</a></li>
    <li><a href="~/Product/Category" class="btn-large">Category</a></li>
    <li><a href="~/Product/MarketPlaceSection"  class="btn-large">Market Place Section</a></li>
</ul>

<script>

    toastr.options = {
        "closeButton": false,
        "debug": false,
        "positionClass": "toast-top-full-width",
        "onclick": null,
        "showDuration": "300",
        "hideDuration": "1000",
        "timeOut": "5000",
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    }
</script>

@if (TempData["Success"] != null && TempData["Success"].ToString() == "true")
{
                    
                        <script>

                            (function () {
                                toastr.success('Product data updated successfully :)');

                            })();
                        </script>
}

@if (TempData["Success"] != null && TempData["Success"].ToString() == "false")
{
                    
                        <script>
                            (function () {
                                toastr.error('Some erroe occured :(');
                            })();
                        </script>
}

<script id="client-template" type="text/x-kendo-template">
    <div class='well'>
        <div class='row'> 
                <div class='span4'>
                    <div><b>Product ID: </b> #: ID #</div>
                    <div>Product Code: #: ProductCode #</div>
                    <div>Name: #: Name #</div>
                    <div>Product Status: #: ProductStatus #</div>
                    <div>Charge Frequence: #: ChargeFrequency #</div>
    
                    <div>
                            Charge Type:    
                            #if(ChargeType == 'Tiered'){#
                                <a href='\#' onclick='showTieredWindow(#: ID #)'> #: ChargeType # </a>
                            #}else{#
                                 #: ChargeType #
                            #}#
                    </div>
    
    
                    <div>Charge: AUD #: Charge #</div>
                    <div>Effective Date: #=kendo.toString(EffectiveDate,"yyyy-MM-dd") #</div>
                    <div>End Date: #=kendo.toString(EndDate,"yyyy-MM-dd") #</div>
                </div>

             <div class='span4'>
                  <div>Market Place Section: #: MarketPlaceSection #</div>
                  <div>Partner: #: PartnerName #</div>
                  <div>Category: #: ProductCategoryName #</div>

                  <div>Revenue Share Type: #: RevenuShareType #</div>
                  <div>FixedPartnerRevenue: #: FixedPartnerRevenue #</div>
                  <div>FixedOperatorRevenue: #: FixedOperatorRevenue #</div>
                  <div>PercentagePartnerRevenue: #: PercentagePartnerRevenue #</div>
                  <div>PercentageOperatorRevenue: #: PercentageOperatorRevenue #</div>
                  <div>Description: #: Description #</div>
            </div>
        </div>
    </div>
</script>

@(Html.Kendo().Grid<OBMPDataModel.ProductView>()
      .Name("ProductView")
      .DataSource(dataSource => dataSource // Configure the grid data source
          .Ajax() // Specify that ajax binding is used
          .Model(model =>
            {
                model.Id(p => p.ID); // Specify the property which is the unique identifier of the model
                model.Field(p => p.ID).Editable(false); // Make the ProductID property not editable
            })
          .Read(read => read.Action("AllProducts", "Product")) // Set the action method which will return the data in JSON format
          .Update(update => update.Action("Update", "Product"))  // Action invoked when the user saves an updated data item
       )
      .Columns(columns =>
      {
          // Create a column bound to the ID property
          columns.Bound(p => p.ID).Filterable(false);
          columns.Bound(p => p.Name);
          columns.Bound(p => p.ChargeFrequency);
          columns.Bound(p => p.ChargeType);
          columns.Bound(p => p.Charge);  
          //columns.Bound(p => p.DateRegistered).Format("{0:d}");
          //columns.Bound(p => p.EndDate).Format("{0:d}");
          columns.Bound(p => p.ProductStatus).Title("Status");
          columns.Bound(p => p.PartnerName).Title("Partner");
          //columns.Command(commands => { commands.Edit(); }).Width(100);
          //columns.Command(command => command.Custom("ViewDetails").Click("showDetails"));
          columns.Template(@<text></text>).ClientTemplate(
                @Html.ActionLink("Edit", "Edit", new { id = "#=ID#" }).ToHtmlString());
      })
      .Pageable() // Enable paging
      .Sortable() // Enable sorting
      .Filterable()
      .Editable(editable => editable.Mode(GridEditMode.PopUp))
      .ClientDetailTemplateId("client-template")
)


@section Scripts {
    
    <script>

        function showTieredWindow( id) {
            var wnd = $("#tierWindow").data("kendoWindow");
            wnd.refresh({
                url: "/Product/TieredData",
                data: { productID: id }
            });

            wnd.center().open();
        }

    </script>

}


@(Html.Kendo().Window()
    .Name("tierWindow")
    .Title("Product tier data")
    .Visible(false)
    .Modal(true)
    .Content("loading data...")
    .Draggable(true)
    .Width(550)    
)
